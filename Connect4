using System;

class Program
{
    static void Main(string[] args)
    {
        Game game = new Game();
        game.Play();
    }
}

class Game
{
    private ConnectFour board;
    private Player player1;
    private Player player2;

    public Game()
    {
        board = new ConnectFour();
        player1 = new Player("Player 1", 'X');
        player2 = new Player("Player 2", 'O');
    }

    public void Play()
    {
        board.DisplayBoard();

        while (true)
        {
            int column = -1;
            Player activePlayer = board.IsPlayer1sTurn ? player1 : player2;

            do
            {
                Console.WriteLine(activePlayer.Name + ", choose a column (0-6):");
            } while (!int.TryParse(Console.ReadLine(), out column) || column < 0 || column >= ConnectFour.Columns || !board.IsValidColumn(column));

            int row = board.AddToken(column);

            if (board.IsGameWon(row, column))
            {
                board.DisplayBoard();
                Console.WriteLine(activePlayer.Name + " has won!");
                break;
            }

            if (board.IsGameDraw())
            {
                board.DisplayBoard();
                Console.WriteLine("The game is a draw!");
                break;
            }

            board.NextTurn();
            board.DisplayBoard();
        }
    }
}

class Player
{
    public string Name { get; private set; }
    public char Token { get; private set; }

    public Player(string name, char token)
    {
        Name = name;
        Token = token;
    }
}

class ConnectFour
{
    public const int Rows = 6;
    public const int Columns = 7;
    private char[,] board = new char[Rows, Columns];
    public bool IsPlayer1sTurn { get; private set; }

    public ConnectFour()
    {
        InitializeBoard();
        IsPlayer1sTurn = true;
    }

    public void DisplayBoard()
    {
        Console.Clear();
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                Console.Write("| " + board[i, j] + " ");
            }
            Console.WriteLine("|");
        }
        Console.WriteLine("---------------");
    }

    public bool IsValidColumn(int column)
    {
        return board[0, column] == ' ';
    }

    public int AddToken(int column)
    {
        int row;
        for (row = Rows - 1; row >= 0; row--)
        {
            if (board[row, column] == ' ')
            {
                board[row, column] = IsPlayer1sTurn ? 'X' : 'O';
                break;
            }
        }
        return row;
    }

    public void NextTurn()
    {
        IsPlayer1sTurn = !IsPlayer1sTurn;
    }

    public bool IsGameWon(int row, int column)
    {
        char token = board[row, column];
        int count;

        // Horizontal Check
        count = 1 + CountTokens(row, column, 0, 1) + CountTokens(row, column, 0, -1);
        if (count >= 4) return true;

        // Vertical Check
        count = 1 + CountTokens(row, column, 1, 0);
        if (count >= 4) return true;

        // Diagonal (\) Check
        count = 1 + CountTokens(row, column, 1, 1) + CountTokens(row, column, -1, -1);
        if (count >= 4) return true;

        // Diagonal (/) Check
        count = 1 + CountTokens(row, column, 1, -1) + CountTokens(row, column, -1, 1);
        if (count >= 4) return true;

        return false;
    }

    private int CountTokens(int row, int column, int deltaRow, int deltaColumn)
    {
        char token = board[row, column];
        int count = 0;
        int r = row + deltaRow;
        int c = column + deltaColumn;

        while (r >= 0 && r < Rows && c >= 0 && c < Columns && board[r, c] == token)
        {
            count++;
            r += deltaRow;
            c += deltaColumn;
        }

        return count;
    }

    public bool IsGameDraw()
    {
        for (int i = 0; i < Columns; i++)
        {
            if (IsValidColumn(i))
            {
                return false;
            }
        }
        return true;
    }

    private void InitializeBoard()
    {
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                board[i, j] = ' ';
            }
        }
    }
}
